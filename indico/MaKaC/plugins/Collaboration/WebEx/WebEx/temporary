





    elif action.lower() == "list":
            the_xml = """<?xml version="1.0" encoding="ISO-8859-1"?>
<serv:message xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <header>
      <securityContext>
         <webExID>%(username)s</webExID>
         <password>%(password)s</password>
         <siteID>%(siteID)s</siteID>
         <partnerID>%(partnerID)s</partnerID>
         <email>johnsmith@xyz.com</email>
      </securityContext>
   </header>
   <body>
    <bodyContent xsi:type="java:com.webex.service.binding.meeting.LstsummaryMeeting">
     <listControl>
      <startFrom/>
      <maximumNum>20</maximumNum>
     </listControl>
     <order>
      <orderBy>STARTTIME</orderBy>
     </order>
     <dateScope>
     </dateScope>
    </bodyContent>
  </body>
</serv:message>
""" % ( { "username" : getWebExOptionValueByName("WEUserID"), "password" : getWebExOptionValueByName("WEPassword"), "siteID" : getWebExOptionValueByName("WESiteID"), "partnerID" : getWebExOptionValueByName("WEPartnerID") } )



        
"""    try:
        response["meetingKey"] = dom.getElementsByTagName( "meet:meetingkey" )[0].firstChild.toxml('utf-8')
    except:
        pass
    try:
        response["url"] = dom.getElementsByTagName( "serv:attendee" )[0].firstChild.toxml('utf-8')
    except:
        pass
    try:
        response["password"] = dom.getElementsByTagName( "meet:meetingPassword" )[0].firstChild.toxml('utf-8')
    except:
        response["password"] = ""
    try:
        attendees = dom.getElementsByTagName( "com:email" )
        response["attendees"] = ""
        for attendee in attendees:
            response["attendees"] = response["attendees"] + ',' + attendee.firstChild.toxml('utf-8')
    except: 
        pass
    try:
        response["start"] = dom.getElementsByTagName( "meet:startDate" )[0].firstChild.toxml('utf-8')
"""
    return response






        
"""def parseWebExMeetingList( xml ):
    response = {}
    meetingIDs = []
    dom = xml.dom.minidom.parseString( xml )
    response["status"] = dom.getElementsByTagName( "serv:result" )[0].firstChild.toxml('utf-8')
    if response["status"] != "SUCCESS":
        return "error in response"
    response["type"] = dom.getElementsByTagName( "serv:bodyContent" )[0].getAttribute("xsi:type").encode('utf-8')
    meetings = dom.getElementsByTagName( "meet:meeting" )
    for meeting in meetings:
        mKey = meeting.getElementsByTagName( "meet:meetingKey" )[0].firstChild.toxml('utf-8')
        meetingIDs.append( mKey )
#        mName = getElementsByTagName( "meet:confName" )[0].firstChild.toxml('utf-8')
#        mOwner = getElementsByTagName( "meet:hostWebExID" )[0].firstChild.toxml('utf-8')
#        mStatus = getElementsByTagName( "meet:status" )[0].firstChild.toxml('utf-8')
#        mStart = getElementsByTagName( "meet:startDate" )[0].firstChild.toxml('utf-8')
#        mParticipantsJoined = getElementsByTagName( "meet:participantsJoined" )[0].firstChild.toxml('utf-8')
    return meetingIDs
"""




    def _notifyTimezoneChange(self, oldTimezone, newTimezone):

        try:
            Logger.get('WebEx').info( "###--### NOTIFY TIMEZONE CHANGE!!!\n Old TZ: %s\nNew TZ: %s\n\nINSERT CODE TO UPDATE THE WebEX TIME HERE\n" % ( oldTimezone, newTimezone  ) )
            params = self.getBookingParams()
            t1 = datetime( *strptime( str(self.getAdjustedStartDate('UTC'))[:-9], "%Y-%m-%d %H:%M" )[0:7])
            t2 = datetime( *strptime( str(self.getAdjustedEndDate('UTC'))[:-9], "%Y-%m-%d %H:%M" )[0:7])
            diff = t2 - t1
            days = diff.days
            minutes,seconds = divmod(diff.seconds, 60)
            duration = minutes + diff.days * 1440
            start_date = t1.strftime( "%m/%d/%Y %H:%M" )
            request_xml = """<?xml version="1.0\" encoding="UTF-8"?>
<serv:message xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:serv=\"http://www.webex.com/schemas/2002/06/service" >
<header>
  <securityContext>
    <webExID>%(username)s</webExID>
    <password>%(password)s</password>
    <siteID>%(siteID)s</siteID>
    <partnerID>%(partnerID)s</partnerID>
  </securityContext>
</header>
<body>
  <bodyContent xsi:type="java:com.webex.service.binding.meeting.SetMeeting" xmlns:meet="http://www.webex.com/schemas/2002/06/service/meeting" >
     <meetingkey>%(meetingKey)s</meetingkey>
     <schedule>
        <startDate>%(startDate)s:00</startDate>
        <duration>%(duration)s</duration>
        <timeZoneID>21</timeZoneID><!--Zone 21 is GMT/UTC-->
     </schedule>
  </bodyContent>
</body>
</serv:message>
""" % ( { "username" : params['webExUser'], "password" : params['webExPass'], "siteID" : getWebExOptionValueByName("WESiteID"), "partnerID" : getWebExOptionValueByName("WEPartnerID"), "startDate" : start_date, "duration" : duration, "meetingKey" : self._webExKey } )
            Logger.get('WebEx').debug( "WebEx Modify TZ Request: \n%s" % request_xml )
            response_xml = sendXMLRequest( request_xml )
            Logger.get('WebEx').debug( "WebEx Modify TZ Response:\n\n%s" % ( response_xml ) )
            dom = xml.dom.minidom.parseString( response_xml )
            status = dom.getElementsByTagName( "serv:result" )[0].firstChild.toxml('utf-8')
            if status == "SUCCESS":
                self.bookingOK()
                self.checkCanStart()
            else:
               Logger.get('WebEx').debug( "Rasing exception" )
               reason = dom.getElementsByTagName( "serv:reason" )[0].firstChild.toxml('utf-8')
               raise EVOException(_(status + ": The booking could not be created.\n The WebEx Server sent the following error message: \n" + reason) )
        except Exception,e:
            Logger.get('WebEx').debug( "some real exception happened" )
            raise EVOException(_("The booking could not be created due to a problem with the WebEx Server" ))
            
